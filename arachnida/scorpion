#!/usr/bin/python3
from math import floor, sqrt
import json
from pprint import pprint
import sys
import io
from infos import TAGS_DESCRIPTIONS, TAG_NAMES

# https://exiftool.org/TagNames/EXIF.html
# https://www.media.mit.edu/pia/Research/deepview/exif.html
TREATED_AS_STRINGS = [0x9000, 0x9C9B, 0x9C9C, 0x9C9D, 0xA000]


def carve_exif(file: str):
    data: bytes
    with open(file, "rb") as jfif:
        data = jfif.read()
    data = data[data.find(b"\xff\xe1") :]
    data = data[10 : int.from_bytes(data[2:4], "big")]
    with open(file + ".exif", "wb") as exif:
        exif.write(data)
    return file + ".exif"


def format_to_infos(format_as_int: int):
    formats = {
        1: ("unsigned byte", 1),
        2: ("ascii strings", 1),
        3: ("unsigned short", 2),
        4: ("unsigned long", 4),
        5: ("unsigned rational", 8),
        6: ("signed byte", 1),
        7: ("undefined", 1),
        8: ("signed short", 2),
        9: ("signed long", 4),
        10: ("signed rational", 8),
        11: ("single float", 4),
        12: ("double float", 8),
    }
    return formats.get(format_as_int, (hex(format_as_int), 0))


def tag_to_name(tag_as_int: int):

    return TAG_NAMES.get(tag_as_int, hex(tag_as_int))


def extract(file: str):
    data: io.BytesIO
    with open(file, "rb") as exif:
        data = io.BytesIO(exif.read())
    tiff_header = data.read(8)
    if tiff_header.startswith(b"II"):
        endianness = "little"
    else:
        endianness = "big"
    entries = {"ExifOffset": 0}
    current_offset = 0
    last_offset = 1
    while last_offset != current_offset:
        last_offset = entries.get("ExifOffset")
        ifd_dir_entry_no = int.from_bytes(data.read(2), endianness)
        for i in range(ifd_dir_entry_no):
            entry = data.read(12)
            tag = int.from_bytes(entry[:2], endianness)
            tag_name = tag_to_name(tag)
            fmt = int.from_bytes(entry[2:4], endianness)
            fmt_infos = format_to_infos(fmt)
            component_no = int.from_bytes(entry[4:8], endianness)
            data_size = fmt_infos[1] * component_no
            data_is_offset = data_size > 4
            data_value = entry[8:12]
            if data_is_offset:
                rewind = data.seek(0, 1)
                data.seek(int.from_bytes(data_value, endianness), 0)
                data_value = data.read(data_size)
                data.seek(rewind, 0)
            if fmt == 2 or tag in TREATED_AS_STRINGS:
                encoding = "utf-8"
                data_value = (
                    data_value.decode(encoding=encoding)
                    .replace("\u0000", "")
                    .strip()
                )
            elif fmt == 5 or fmt == 10:
                num = int.from_bytes(data_value[:4], endianness)
                den = int.from_bytes(data_value[4:], endianness)
                data_value = num // den
            elif fmt < 11:
                data_value = int.from_bytes(data_value, endianness)
            else:
                data_value = int.from_bytes(data_value, endianness)  #! CHANGEME
            entries[tag_name] = data_value
        current_offset = entries.get("ExifOffset")
        if last_offset != current_offset:
            data.seek(current_offset, 0)
    entries.pop("ExifOffset")
    return entries


def get_exif(tags_dict: dict):
    for tag in tags_dict:
        value = TAGS_DESCRIPTIONS.get(tag, {}).get(tags_dict[tag])
        if value is None:
            value = tags_dict[tag]
        if tag in ["ApertureValue", "MaxApertureValue"]:
            value = f"F{2 ** (tags_dict[tag] / 2):0.2}"
        elif tag == "ShutterSpeedValue":
            value = f"1/{2 ** (tags_dict[tag] / 2)}"
        print(f"{tag}: {value}")


if __name__ == "__main__":
    if len(sys.argv) > 1:
        block = carve_exif(sys.argv[1])
        tags = extract(block)
        get_exif(tags)
